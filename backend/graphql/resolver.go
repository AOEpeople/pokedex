// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

//go:build !graphql
// +build !graphql

package graphql

import (
	"context"

	graphql1 "flamingo.me/graphql"
	"github.com/aoepeople/pokedex/backend/pokedex"
)

var _ ResolverRoot = new(rootResolver)

type rootResolver struct {
	rootResolverMutation *rootResolverMutation
	rootResolverQuery    *rootResolverQuery
}

func (r *rootResolver) Inject(
	rootResolverMutation *rootResolverMutation,
	rootResolverQuery *rootResolverQuery,
) {
	r.rootResolverMutation = rootResolverMutation
	r.rootResolverQuery = rootResolverQuery
}

func (r *rootResolver) Mutation() MutationResolver {
	return r.rootResolverMutation
}
func (r *rootResolver) Query() QueryResolver {
	return r.rootResolverQuery
}

type rootResolverMutation struct {
	resolveFlamingo   func(ctx context.Context) (*string, error)
	resolveSetCatched func(ctx context.Context, id int, catched bool) (*pokedex.Pokemon, error)
}

func (r *rootResolverMutation) Inject(
	mutationFlamingo *graphql1.FlamingoQueryResolver,
	mutationSetCatched *pokedex.Resolver,
) {
	r.resolveFlamingo = mutationFlamingo.Flamingo
	r.resolveSetCatched = mutationSetCatched.SetCatched
}

func (r *rootResolverMutation) Flamingo(ctx context.Context) (*string, error) {
	return r.resolveFlamingo(ctx)
}
func (r *rootResolverMutation) SetCatched(ctx context.Context, id int, catched bool) (*pokedex.Pokemon, error) {
	return r.resolveSetCatched(ctx, id, catched)
}

type rootResolverQuery struct {
	resolveFlamingo     func(ctx context.Context) (*string, error)
	resolvePokemon      func(ctx context.Context, ids []int, catched *bool) ([]*pokedex.Pokemon, error)
	resolveTotal        func(ctx context.Context) (int, error)
	resolveTotalCatched func(ctx context.Context) (int, error)
}

func (r *rootResolverQuery) Inject(
	queryFlamingo *graphql1.FlamingoQueryResolver,
	queryPokemon *pokedex.Resolver,
	queryTotal *pokedex.Resolver,
	queryTotalCatched *pokedex.Resolver,
) {
	r.resolveFlamingo = queryFlamingo.Flamingo
	r.resolvePokemon = queryPokemon.Pokemon
	r.resolveTotal = queryTotal.Total
	r.resolveTotalCatched = queryTotalCatched.TotalCatched
}

func (r *rootResolverQuery) Flamingo(ctx context.Context) (*string, error) {
	return r.resolveFlamingo(ctx)
}
func (r *rootResolverQuery) Pokemon(ctx context.Context, ids []int, catched *bool) ([]*pokedex.Pokemon, error) {
	return r.resolvePokemon(ctx, ids, catched)
}
func (r *rootResolverQuery) Total(ctx context.Context) (int, error) {
	return r.resolveTotal(ctx)
}
func (r *rootResolverQuery) TotalCatched(ctx context.Context) (int, error) {
	return r.resolveTotalCatched(ctx)
}

func direct(root *rootResolver) map[string]interface{} {
	return map[string]interface{}{
		"Mutation.Flamingo":   root.Mutation().Flamingo,
		"Mutation.SetCatched": root.Mutation().SetCatched,
		"Query.Flamingo":      root.Query().Flamingo,
		"Query.Pokemon":       root.Query().Pokemon,
		"Query.Total":         root.Query().Total,
		"Query.TotalCatched":  root.Query().TotalCatched,
	}
}
